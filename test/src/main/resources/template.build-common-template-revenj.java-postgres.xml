<?xml version="1.0" encoding="UTF-8"?>
<project name="common" xmlns:if="ant:if" xmlns:unless="ant:unless">
  <loadproperties srcFile="${user.home}\.config\DSL-OCD\test.config"/>

  <property name="java.generated.dir" location="src/generated/java" />
  <property name="resources.generated.dir" location="src/generated/resources" />
  <property name="java.test.dir" location="src/test/java" />
  <property name="resources.test.dir" location="src/test/resources" />

  <property name="client.tmp" location="client.tmp" />
  <property name="server.tmp" location="server.tmp" />
  <property name="migration.tmp" location="migration.tmp" />

  <property name="dsl-compiler" value="dsl-compiler-1.5.5952.18715.exe" />
  <property name="project.dsl-compiler.temporary.download" location="${client.tmp}/${dsl-compiler}" />
  <property name="project.java_client" location="java_client" />

  <property name="tools.lib" location="${tools}/lib" />
  <property name="tools.build" location="${tools}/build" />
  <property name="tools.revenj" location="${tools}/revenj.java" />
  <property name="tools.java_client" location="${tools}/java_client" />
  <property name="dsl-compiler-client" location="/${tools.build}/dsl-clc-1.6.2-20160418.jar" />
  <property name="tools.dsl-compiler" location="${tools.build}/${dsl-compiler}" />
  <property name="tools.ping" location="/${tools.build}/dsl-ocd-util-ping-0.1.0.jar" />
  <property name="tools.jetty-runner" location="/${tools.build}/jetty-runner.jar" />
  <property name="tools.jetty-stopper" location="/${tools.build}/jetty-stopper.jar" />

  <property name="dsl.src" value="../dsl" />
  <property name="generated.model" value="model" />

  <property name="target" location="target" />
  <property name="target.test" location="target/test-classes" />
  <property name="target.main" location="target/classes" />
  <property name="target.main.packaged" location="${target}/${projectShortName}.jar" />
  <property name="target.test.packaged" location="${target}/${projectShortName}-test.jar" />

  <property name="project.revenj" location="revenj.java" />
  <property name="revenj.war" location="revenj.java/revenj-servlet-0.9.6-20160418-175000.war" />
  <property name="revenj.config.template" location="${tools}/config/revenj.properties.template" />
  <property name="revenj.config" location="${project.revenj}/revenj.properties" />

  <get-jetty-stop-port port="${revenjPort}" result="jetty-stop-port" />
  <get-jetty-stop-key host="${revenjHost}" port="${revenjPort}" result="jetty-stop-key" />

  <filter token="dbSuperUser" value="${dbSuperUser}" />
  <filter token="dbSuperPassword" value="${dbSuperPassword}" />
  <filter token="dbUser" value="${dbUser}" />
  <filter token="dbPassword" value="${dbPassword}" />
  <filter token="dbHost" value="${dbHost}" />
  <filter token="dbPort" value="${dbPort}" />

  <path id="compile.classpath">
    <fileset dir="${project.java_client}">
      <include name="**/*.jar" />
    </fileset>
  </path>

  <path id="test.classpath">
    <fileset dir="${tools.lib}">
      <include name="**/*.jar" />
    </fileset>
    <fileset dir="${project.java_client}">
      <include name="**/*.jar" />
    </fileset>
  </path>

  <path id="postgres.classpath" location="${tools.build}/postgresql-9.4.1208.jre6.jar" />

  <target name="create-db" description="Tries to create this project's database. Does not fail the build on failure, since the database might already exist.">
    <sql driver="org.postgresql.Driver" url="jdbc:postgresql://${dbHost}:${dbPort}/postgres" userid="${dbSuperUser}" password="${dbSuperPassword}" autocommit="true" onerror="continue">
      <classpath refid="postgres.classpath" />
      CREATE DATABASE "${dbName}" OWNER "${dbUser}" ENCODING 'utf8' TEMPLATE template1;
    </sql>
  </target>

  <target name="drop-db" description="Tries to drop this project's database. Does not fail the build on failure, since the database might already be dropped.">
    <sql driver="org.postgresql.Driver" url="jdbc:postgresql://${dbHost}:${dbPort}/postgres" userid="${dbSuperUser}" password="${dbSuperPassword}" autocommit="true" onerror="continue">
      <classpath refid="postgres.classpath" />
      DROP DATABASE IF EXISTS "${dbName}";
    </sql>
  </target>

  <target name="clean-revenj-project" description="Deletes the project Revenj copy">
    <delete dir="${project.revenj}" />
  </target>

  <target name="clean-java-client-project" description="Deletes the project Java client copy">
    <delete dir="${project.java_client}" />
  </target>

  <target name="clean-test" description="Deletes the test result for the project">
    <delete file="TEST-${testName}.xml" />
  </target>

  <target name="clean" description="Performs a project clean, but tries to save time by not deleting the downloaded static dependencies. (Does not delete test results.)">
    <delete dir="${java.generated.dir}" />
    <delete dir="${resources.generated.dir}" />
    <delete dir="${target.main}" />
    <delete dir="${target.test}" />
    <delete dir="${target}" />
    <delete dir="${client.tmp}" />
    <delete dir="${server.tmp}" />
    <delete dir="${migration.tmp}" />
    <delete dir="${generated.model}" />
    <delete dir="${project.java_client}" />
    <delete dir="${project.revenj}" />
  </target>

  <target name="setup" description="Sets up the project directory structure">
    <mkdir dir="${java.generated.dir}" />
    <mkdir dir="${resources.generated.dir}" />
    <mkdir dir="${target}" />
    <mkdir dir="${target.main}" />
    <mkdir dir="${target.test}" />
    <mkdir dir="${client.tmp}" />
    <mkdir dir="${server.tmp}" />
    <mkdir dir="${migration.tmp}" />
    <mkdir dir="${generated.model}" />
    <mkdir dir="${project.java_client}" />
  </target>

  <target name="copy-revenj-template" if="revenj.template.exists">
    <copy todir="${project.revenj}">
      <fileset dir="${tools.revenj}" />
    </copy>
  </target>
  <target name="copy-downloaded-revenj-template" unless="revenj.template.exists">
    <mkdir dir="${tools.revenj}" />
    <copy todir="${tools.revenj}">
      <fileset dir="${project.revenj}" />
    </copy>
  </target>

  <target name="copy-java-client-template" if="java_client.template.exists">
    <copy todir="${project.java_client}">
      <fileset dir="${tools.java_client}" />
    </copy>
  </target>
  <target name="copy-downloaded-java-client-template" unless="java_client.template.exists">
    <mkdir dir="${tools.java_client}" />
    <copy todir="${tools.java_client}">
      <fileset dir="${project.java_client}" />
    </copy>
  </target>

  <target name="copy-downloaded-dsl-compiler-template" unless="dsl-compiler.template.exists">
    <copy file="${project.dsl-compiler.temporary.download}" tofile="${tools.dsl-compiler}" />
  </target>

  <target name="compile-revenj" description="Calls the DSL command line client and tries to compile the Revenj server code">
    <delete dir="${server.tmp}" />
    <mkdir dir="${server.tmp}" />
    <condition property="revenj.optional.download" value="" else="-download">
      <available file="${tools.revenj}" type="dir" />
    </condition>
    <condition property="revenj.template.exists">
      <available file="${tools.revenj}" type="dir" />
    </condition>
    <antcall target="copy-revenj-template" />
    <sql driver="org.postgresql.Driver" url="jdbc:postgresql://${dbHost}:${dbPort}/postgres" userid="${dbSuperUser}" password="${dbSuperPassword}" autocommit="true" onerror="continue">
      <classpath refid="postgres.classpath" />
      ALTER USER "${dbUser}" WITH SUPERUSER;
    </sql>
    <java jar="${dsl-compiler-client}" fork="true" timeout="300000">
      <classpath refid="compile.classpath" />
      <arg value="dsl=${dsl.src}" />
      <arg value="compiler=${tools.dsl-compiler}" />
      <arg value="target=revenj.java" />
      <arg line="${revenj.optional.download}" />
      <arg value="temp=${server.tmp}" />
      <arg value="settings=${serverSettings}" />
      <arg value="postgres=${dbHost}:${dbPort}/${dbName}?user=${dbUser}&amp;password=${dbPassword}" />
      <arg value="sql=${migration.tmp}" />
      <arg value="force" />
      <arg value="apply" />
    </java>
    <sql driver="org.postgresql.Driver" url="jdbc:postgresql://${dbHost}:${dbPort}/postgres" userid="${dbSuperUser}" password="${dbSuperPassword}" autocommit="true" onerror="continue">
      <classpath refid="postgres.classpath" />
      ALTER USER "${dbUser}" WITH NOSUPERUSER;
    </sql>
    <move file="generated-server-model.jar" todir="${generated.model}" />
    <antcall target="copy-downloaded-revenj-template" />
    <antcall target="copy-revenj-config-template" />
  </target>

  <target name="copy-revenj-config-template" description="Copy the template Revenj configuration file, and replace the template strings with actual configuration values.">
    <copy file="${revenj.config.template}" tofile="${revenj.config}" overwrite="true" filtering="true" />
  </target>

  <target name="compile-java-client" description="Calls the DSL command line client and tries to compile the Java client code to be used for testing">
    <delete dir="${client.tmp}" />
    <mkdir dir="${client.tmp}" />
    <condition property="java_client.optional.download" value="-download" else="">
      <or>
        <length length="0">
          <fileset dir="${project.java_client}" />
        </length>
        <not>
          <available file="${tools.dsl-compiler}" type="file" />
        </not>
      </or>
    </condition>
    <condition property="java_client.template.exists">
      <available file="${tools.java_client}" type="dir" />
    </condition>
    <condition property="dsl-compiler.template.exists">
      <available file="${tools.dsl-compiler}" type="file" />
    </condition>
    <antcall target="copy-java-client-template" />
    <java jar="${dsl-compiler-client}" fork="true">
      <classpath refid="compile.classpath" />
      <arg value="dsl=${dsl.src}" />
      <arg value="compiler=${tools.dsl-compiler}" />
      <arg value="target=java_client" />
      <arg line="${java_client.optional.download}" />
      <arg value="temp=${client.tmp}" />
      <arg value="settings=${clientSettings}" />
      <arg value="namespace=ocd" />
    </java>
    <delete file="generated-model-java.jar" />
    <antcall target="copy-downloaded-java-client-template" />
    <antcall target="copy-downloaded-dsl-compiler-template" />
  </target>

  <target name="dsl-deploy" description="Moves the generated model DLL and Java files to their respective directories. Also applies the Revenj template configuration for this project.">
    <copy todir="${java.generated.dir}/ocd">
      <fileset dir="${client.tmp}/JAVA_CLIENT/ocd" />
    </copy>
  </target>

  <property environment="env" />
  <condition property="bootclasspath1" value="-bootclasspath" else="-g"><!-- find a better else="noop" variable, linux javac doesn't understand empty parameters -->
    <isset property="env.JDK16_HOME" />
  </condition>
  <condition property="bootclasspath2" value="${env.JDK16_HOME}/jre/lib/rt.jar" else="-g"><!-- find a better else="noop" variable, linux javac doesn't understand empty parameters -->
    <isset property="env.JDK16_HOME" />
  </condition>

  <target name="compile-generated" description="Compiles the generated Java client sources.">
    <javac srcdir="${java.generated.dir}" destdir="${target.main}" fork="true" deprecation="true" encoding="UTF-8" source="1.6" target="1.6" includeantruntime="false">
      <classpath refid="compile.classpath" />
      <compilerarg value="-Xlint:all" />
      <compilerarg value="${bootclasspath1}" />
      <compilerarg value="${bootclasspath2}" />
    </javac>
    <copy todir="${target.main}">
      <fileset dir="${resources.generated.dir}" />
    </copy>
  </target>

  <target name="package-generated" description="Packages the generated java client sources in one common JAR.">
    <jar destfile="${target.main.packaged}" basedir="${target.main}" />
  </target>

  <target name="compile-tests" description="Compiles the test sources">
    <javac srcdir="${java.test.dir}" destdir="${target.test}" fork="true" deprecation="true" encoding="UTF-8" source="1.6" target="1.6" includeantruntime="false">
      <classpath refid="compile.classpath" />
      <classpath refid="test.classpath" />
      <classpath location="${target.main}" />
      <compilerarg value="-Xlint:all" />
      <compilerarg value="${bootclasspath1}" />
      <compilerarg value="${bootclasspath2}" />
    </javac>
    <copy todir="${target.test}">
      <fileset dir="${resources.test.dir}" />
    </copy>
  </target>

  <target name="package-tests" description="Packages the compiled test sources in one common JAR.">
    <jar destfile="${target.test.packaged}" basedir="${target.test}" />
  </target>

  <target name="run-revenj" description="Tries to invoke mono on our local Revenj instance, if it exists.">
    <java jar="${tools.jetty-runner}" dir="${project.revenj}" fork="true" spawn="true">
      <arg value="--host" /> <arg value="${revenjHost}" />
      <arg value="--port" /> <arg value="${revenjPort}" />
      <arg value="--stop-port" /> <arg value="${jetty-stop-port}" />
      <arg value="--stop-key" /> <arg value="${jetty-stop-key}" />
      <arg value="${revenj.war}" />
    </java>
    <java jar="${tools.ping}" fork="true">
      <arg value="-t" />
      <arg value="30000ms" />
      <arg value="-i" />
      <arg value="100ms" />
      <arg value="http://${revenjHost}:${revenjPort}/ping" />
    </java>
  </target>

  <target name="kill-revenj" description="Tries to kill our instance of revenj">
    <java jar="${tools.jetty-stopper}" fork="true">
      <arg value="STOP.HOST=${revenjHost}" />
      <arg value="STOP.PORT=${jetty-stop-port}" />
      <arg value="STOP.KEY=${jetty-stop-key}" />
      <arg value="--stop" />
    </java>
  </target>

  <target name="run-junit-ant" description="Runs the generated JUnit test suite using Ant's 'junit' goal, generates the XML otput">
    <junit printsummary="on" fork="true" showoutput="true">
      <classpath refid="compile.classpath" />
      <classpath refid="test.classpath" />
      <classpath location="${target.main.packaged}" />
      <classpath location="${target.test.packaged}" />
      <test name="${testName}">
        <formatter type="xml" />
      </test>
    </junit>
  </target>

  <target name="run-junit-suite" description="Runs the generated JUnit test suite">
    <antcall target="run-junit-ant" />
  </target>

  <target name="run-tests" description="Starts the project's Revenj instance, runs the generated JUnit test suite, and then kills the Revenj instance">
    <antcall target="run-revenj" />
    <antcall target="run-junit-suite" />
    <antcall target="kill-revenj" />
  </target>

  <target name="all" description="Runs the full build and test suite">
    <antcall target="setup" />

    <antcall target="create-db" />

    <antcall target="compile-java-client" />
    <antcall target="compile-revenj" />

    <antcall target="dsl-deploy" />

    <antcall target="compile-generated" />
    <antcall target="package-generated" />

    <antcall target="compile-tests" />
    <antcall target="package-tests" />
    <antcall target="run-tests" />
  </target>

</project>
